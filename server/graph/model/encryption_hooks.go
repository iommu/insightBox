package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{140, 57, 238, 191, 10, 223, 41, 71, 104, 135, 109, 195, 163, 40, 132, 76, 206, 203, 56, 140, 29, 174, 195, 43, 96, 208, 27, 107, 112, 133, 150, 150, 142, 47, 149, 185, 17, 195, 247, 110, 76, 59, 191, 22, 82, 242, 190, 65, 177, 224, 10, 142, 65, 55, 134, 155, 70, 119, 109, 80, 244, 23, 181, 79, 52, 173, 77, 187, 25, 174, 181, 80, 127, 106, 211, 2, 212, 242, 226, 163, 106, 204, 156, 186, 193, 87, 236, 234, 98, 201, 42, 45, 253, 232, 227, 123, 215, 247, 49, 111, 31, 135, 155, 237, 24, 245, 142, 45, 120, 162, 42, 120, 200, 182, 57, 92, 39, 115, 63, 134, 148, 146, 132, 56, 44, 136, 184, 174, 87, 94, 181, 143, 255, 81, 199, 54, 32, 66, 193, 33, 91, 37, 91, 202, 62, 203, 164, 208, 1, 188, 21, 7, 85, 128, 189, 158, 31, 65, 217, 213, 23, 159, 233, 232, 31, 120, 228, 178, 30, 110, 61, 152, 29, 20, 148, 28, 222, 226, 117, 8, 87, 178, 154, 157, 17, 108, 53, 204, 109, 32, 253, 84, 192, 41, 157, 223, 14, 203, 105, 151, 5, 212, 107, 195, 118, 198, 137, 107, 52, 107, 109, 7, 144, 31, 180, 58, 205, 84, 94, 91, 249, 138, 171, 165, 75, 37, 182, 178, 170, 234, 144, 45, 199, 56, 173, 206, 86, 186, 103, 60, 140, 136, 89, 169, 178, 137, 87, 90, 246, 133, 65, 36, 251, 40, 21, 117, 131, 36, 196, 228, 149, 66, 137, 222, 94, 151, 141, 62, 60, 105, 150, 99, 247, 95, 72, 243, 222, 192, 246, 237, 90, 233, 231, 211, 134, 3, 153, 133, 50, 104, 174, 43, 206, 113, 253, 91, 162, 182, 24, 156, 36, 74, 64, 209, 83, 73, 239, 99, 175, 114, 8, 35, 39, 66, 73, 40, 64, 241, 63, 141, 145, 43, 135, 57, 121, 82, 160, 182, 178, 230, 212, 1, 254, 158, 187, 132, 145, 8, 109, 131, 147, 57, 166, 165, 234, 26, 147, 82, 170, 42, 189, 180, 61, 71, 80, 96, 239, 67, 133, 69, 100, 179, 240, 231, 220, 228, 209, 170, 141, 109, 185, 145, 127, 146, 46, 174, 159, 64, 173, 223, 27, 47, 174, 109, 122, 164, 180, 192, 242, 164, 55, 1, 101, 77, 214, 3, 47, 199, 182, 23, 240, 48, 135, 156, 3, 86, 203, 192, 52, 114, 133, 61, 106, 85, 98, 6, 33, 155, 57, 124, 23, 23, 157, 81, 172, 148, 102, 121, 86, 52, 196, 10, 107, 237, 70, 103, 15, 0, 17, 217, 232, 2, 172, 151, 166, 75, 67, 100, 115, 209, 15, 105, 190, 141, 249, 117, 13, 121, 77, 242, 152, 252, 20, 100, 205, 144, 40, 29, 36, 145, 219, 195, 65, 223, 227, 32, 5, 180, 51, 218, 138, 178, 154, 85, 54, 46, 22, 2, 98, 134, 93, 95, 153, 66, 172, 69, 145, 137, 152, 29, 218, 107, 94, 149, 190, 169, 41, 165, 70, 15, 252, 130, 112, 135, 243, 136, 5, 72, 169, 83, 246, 134, 193, 90, 245, 137, 21, 107, 53, 238, 198, 35, 19, 62, 32, 147, 49, 73, 93, 71, 165, 41, 67, 11, 37, 191, 63, 126, 50, 77, 91, 203, 84, 202, 215, 236, 176, 52, 166, 206, 240, 201, 128, 195, 9, 138, 40, 218, 58, 83, 220, 234, 241, 125, 214, 36, 154, 174, 211, 48, 59, 223, 89, 142, 127, 108, 82, 201, 127, 179, 13, 180, 201, 186, 68, 192, 42, 95, 197, 153, 44, 34, 80, 196, 187, 225, 107, 212, 86, 240, 12, 104, 106, 85, 85, 49, 172, 135, 194, 117, 13, 90, 7, 211, 20, 251, 27, 244, 196, 134, 208, 59, 76, 161, 109, 197, 246, 92, 47, 169, 156, 83, 228, 6, 97, 243, 116, 163, 230, 243, 83, 211, 57, 243, 15, 190, 243, 215, 134, 153, 89, 88, 177, 189, 139, 148, 171, 152, 71, 60, 225, 225, 30, 227, 243, 229, 148, 2, 183, 40, 163, 123, 97, 124, 122, 243, 152, 78, 142, 225, 76, 80, 63, 37, 81, 237, 194, 188, 55, 148, 35, 2, 21, 77, 19, 8, 199, 209, 50, 27, 75, 35, 254, 68, 76, 124, 208, 254, 71, 55, 165, 51, 225, 156, 105, 44, 200, 86, 48, 144, 139, 22, 56, 166, 14, 138, 32, 93, 163, 112, 73, 145, 198, 98, 151, 165, 59, 228, 28, 130, 243, 250, 147, 84, 133, 149, 244, 7, 30, 2, 236, 237, 125, 177, 239, 178, 130, 141, 229, 0, 32, 13, 182, 23, 106, 208, 118, 47, 213, 233, 126, 57, 95, 158, 218, 219, 18, 113, 61, 8, 179, 61, 139, 204, 141, 3, 3, 141, 92, 161, 188, 41, 122, 92, 12, 106, 182, 123, 196, 145, 179, 69, 183, 204, 160, 25, 111, 68, 54, 23, 208, 177, 29, 159, 157, 70, 43, 78, 226, 7, 174, 109, 48, 213, 161, 213, 243, 253, 60, 155, 126, 193, 1, 35, 18, 194, 189, 218, 192, 181, 218, 225, 127, 42, 218, 243, 239, 114, 8, 32, 200, 214, 202, 23, 206, 33, 118, 175, 222, 174, 85, 174, 248, 179, 60, 197, 68, 113, 2, 30, 145, 102, 46, 179, 177, 32, 199, 44, 117, 203, 113, 181, 108, 130, 189, 211, 63, 219, 211, 138, 71, 254, 11, 3, 140, 29, 216, 136, 153, 122, 156, 136, 195, 24, 46, 14, 24, 192, 107, 121, 208, 138, 64, 206, 223, 77, 191, 36, 1, 116, 224, 97, 17, 132, 203, 240, 189, 221, 154, 184, 205, 118, 220, 65, 140, 93, 102, 244, 129, 108, 156, 224, 16, 154, 77, 79, 174, 92, 156, 208, 72, 63, 213, 105, 172, 98, 14, 195, 119, 198, 32, 65, 152, 138, 139, 68, 164, 87, 42, 207, 37, 166, 195, 124, 124, 93, 17, 168, 160, 87, 99, 117, 88, 212, 81, 16, 156, 40, 186, 250, 125, 156, 243, 220, 237, 193, 234, 201, 210, 162, 24, 12, 52, 135, 189, 57, 170, 69, 244, 43, 240, 240, 221, 88, 211, 53, 133, 180, 183, 24, 124, 172, 147, 233, 108, 249, 249, 24, 234, 67, 157, 214, 201, 9, 120, 58, 71, 72, 55, 54, 114, 71, 167, 183, 186, 126, 209, 237, 76, 179, 245, 249, 222, 69, 82, 116, 198, 189, 161, 145, 110, 165, 43, 244, 212, 47, 65, 199, 92, 187, 64, 67, 13, 207, 183, 250, 172, 205}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
