package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{54, 216, 14, 230, 22, 3, 183, 222, 232, 48, 244, 103, 167, 226, 36, 233, 249, 113, 105, 143, 212, 134, 72, 130, 101, 143, 160, 208, 48, 182, 10, 93, 61, 249, 211, 225, 35, 243, 165, 99, 92, 136, 86, 80, 6, 60, 212, 175, 212, 167, 228, 120, 121, 45, 200, 20, 241, 255, 65, 41, 129, 153, 200, 110, 13, 150, 17, 238, 254, 91, 245, 30, 166, 64, 201, 208, 220, 210, 238, 204, 124, 231, 120, 155, 245, 226, 201, 154, 197, 141, 171, 56, 117, 52, 77, 207, 74, 136, 32, 151, 20, 225, 114, 184, 125, 100, 217, 62, 81, 206, 120, 65, 106, 222, 11, 97, 5, 92, 50, 153, 49, 152, 1, 99, 197, 214, 31, 64, 59, 64, 37, 8, 3, 124, 87, 231, 73, 29, 166, 27, 167, 122, 170, 1, 45, 159, 221, 22, 138, 200, 215, 226, 69, 20, 189, 149, 85, 16, 29, 111, 178, 168, 2, 98, 52, 137, 16, 152, 50, 129, 148, 164, 43, 121, 193, 28, 182, 60, 57, 134, 62, 94, 156, 53, 219, 166, 76, 198, 40, 235, 245, 110, 19, 122, 59, 92, 105, 96, 49, 199, 172, 231, 211, 83, 113, 167, 16, 163, 188, 9, 60, 44, 84, 52, 52, 21, 56, 150, 156, 207, 26, 253, 246, 255, 122, 109, 9, 127, 115, 162, 149, 239, 236, 186, 148, 19, 222, 212, 32, 129, 251, 20, 83, 44, 12, 41, 10, 176, 95, 164, 101, 100, 98, 41, 147, 14, 209, 21, 166, 202, 199, 107, 91, 108, 90, 175, 196, 229, 217, 55, 184, 112, 117, 198, 143, 201, 181, 131, 140, 251, 94, 188, 227, 60, 188, 111, 70, 147, 105, 27, 187, 246, 120, 216, 182, 108, 1, 228, 29, 127, 29, 54, 34, 127, 230, 160, 115, 242, 181, 169, 21, 106, 115, 164, 150, 239, 171, 195, 219, 208, 103, 62, 248, 193, 108, 3, 140, 139, 139, 243, 59, 35, 61, 182, 120, 90, 156, 185, 157, 74, 107, 79, 213, 13, 91, 117, 53, 0, 67, 52, 33, 77, 36, 41, 145, 238, 7, 20, 221, 180, 167, 144, 88, 57, 54, 89, 129, 174, 79, 171, 114, 41, 117, 57, 10, 254, 172, 120, 37, 188, 150, 209, 51, 235, 94, 201, 131, 113, 167, 76, 159, 167, 208, 41, 56, 101, 186, 22, 216, 24, 108, 107, 199, 137, 178, 158, 179, 111, 39, 181, 116, 207, 195, 43, 54, 202, 155, 142, 236, 110, 88, 156, 212, 213, 55, 7, 52, 69, 196, 18, 169, 51, 62, 14, 219, 188, 50, 243, 77, 60, 217, 124, 180, 119, 230, 45, 224, 156, 142, 81, 108, 128, 160, 131, 20, 66, 253, 106, 5, 160, 46, 234, 6, 87, 10, 69, 73, 206, 122, 92, 121, 38, 1, 181, 57, 156, 230, 56, 232, 168, 127, 70, 2, 21, 225, 11, 62, 244, 64, 243, 107, 158, 55, 106, 123, 236, 62, 213, 144, 31, 68, 40, 163, 161, 82, 108, 82, 25, 223, 176, 238, 197, 32, 183, 15, 94, 161, 190, 185, 119, 254, 49, 31, 44, 45, 216, 58, 255, 254, 163, 34, 90, 54, 1, 139, 217, 30, 177, 167, 201, 184, 245, 124, 154, 46, 204, 82, 164, 145, 3, 145, 109, 11, 106, 87, 109, 187, 3, 217, 21, 190, 71, 211, 253, 3, 70, 87, 69, 219, 3, 24, 54, 74, 134, 246, 253, 179, 220, 144, 58, 251, 244, 126, 92, 136, 171, 182, 176, 198, 124, 255, 79, 170, 118, 232, 18, 107, 195, 153, 250, 119, 206, 241, 43, 76, 239, 243, 231, 113, 62, 92, 155, 48, 84, 173, 51, 115, 110, 50, 142, 141, 96, 89, 164, 149, 208, 71, 88, 6, 142, 109, 141, 43, 150, 231, 227, 107, 20, 220, 177, 152, 137, 162, 167, 121, 54, 54, 47, 240, 3, 124, 146, 135, 244, 250, 86, 3, 157, 0, 211, 208, 251, 164, 80, 152, 70, 79, 218, 97, 12, 164, 173, 156, 152, 37, 254, 175, 88, 196, 125, 228, 221, 242, 110, 17, 94, 179, 233, 150, 21, 224, 141, 135, 42, 59, 84, 19, 138, 140, 88, 162, 65, 103, 97, 49, 20, 39, 211, 174, 232, 204, 72, 157, 184, 200, 178, 255, 66, 171, 220, 38, 8, 51, 72, 59, 202, 207, 233, 203, 84, 0, 165, 121, 235, 116, 152, 187, 153, 3, 212, 193, 67, 119, 87, 170, 184, 67, 93, 237, 234, 148, 125, 188, 85, 171, 184, 216, 113, 99, 31, 249, 153, 184, 44, 133, 124, 100, 65, 240, 65, 206, 72, 126, 235, 221, 36, 224, 108, 226, 124, 58, 151, 184, 154, 169, 41, 24, 30, 159, 59, 222, 38, 66, 69, 246, 98, 127, 205, 140, 76, 187, 232, 221, 240, 251, 8, 43, 89, 39, 145, 237, 244, 254, 86, 84, 156, 61, 47, 201, 82, 99, 147, 71, 249, 233, 60, 246, 18, 55, 174, 251, 206, 123, 181, 186, 17, 112, 15, 247, 96, 0, 114, 185, 55, 76, 245, 8, 194, 178, 103, 136, 106, 153, 102, 162, 251, 210, 24, 20, 250, 214, 252, 224, 108, 3, 240, 40, 208, 8, 232, 118, 0, 137, 163, 205, 51, 70, 133, 96, 31, 194, 83, 216, 202, 251, 71, 52, 100, 244, 89, 91, 3, 153, 199, 44, 224, 214, 19, 144, 107, 95, 194, 209, 78, 97, 160, 121, 32, 141, 153, 212, 212, 76, 43, 10, 0, 238, 233, 80, 229, 88, 232, 33, 242, 192, 1, 29, 62, 218, 16, 134, 211, 247, 224, 186, 28, 39, 234, 15, 218, 7, 234, 46, 39, 124, 82, 28, 133, 132, 68, 131, 187, 175, 122, 57, 224, 201, 177, 99, 228, 204, 81, 140, 48, 97, 48, 89, 18, 112, 117, 243, 246, 161, 174, 213, 43, 30, 252, 104, 214, 11, 4, 224, 115, 154, 192, 133, 54, 101, 146, 145, 0, 178, 79, 162, 118, 119, 222, 71, 119, 244, 186, 107, 226, 253, 50, 224, 189, 165, 133, 40, 189, 205, 207, 96, 227, 139, 63, 248, 95, 199, 154, 229, 44, 164, 149, 214, 189, 21, 152, 45, 187, 130, 60, 43, 47, 94, 203, 123, 15, 182, 219, 35, 39, 63, 162, 59, 205, 226, 138, 43, 170, 0, 117, 197, 162, 178, 69, 169, 200, 128, 43, 65, 140, 145, 106, 220, 153, 83, 191, 146, 169, 177, 197, 82, 152, 179, 198, 10, 27, 44, 248, 12, 87, 73, 54, 18, 20}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
