import { useClient } from "urql";
import {K768_Encrypt} from 'crystals-kyber';

const publicKey = [156, 160, 171, 15, 57, 196, 212, 88, 12, 201, 156, 69, 122, 58, 153, 61, 106, 154, 219, 51, 150, 178, 6, 37, 97, 133, 62, 29,
    232, 23, 56, 132, 93, 197, 20, 123, 188, 217, 13, 53, 103, 150, 99, 120, 14, 238, 65, 52, 69, 85, 38, 221, 165, 19, 217, 181, 207,
    62, 9, 183, 53, 53, 129, 165, 229, 68, 213, 108, 8, 200, 150, 0, 118, 198, 96, 112, 123, 5, 37, 85, 56, 94, 226, 128, 17, 18, 50,
    117, 92, 207, 213, 154, 115, 67, 220, 70, 154, 49, 79, 101, 146, 37, 206, 187, 173, 77, 226, 38, 82, 152, 55, 79, 67, 27, 217, 247,
    138, 218, 91, 157, 139, 104, 112, 253, 243, 75, 247, 105, 172, 27, 23, 95, 214, 101, 200, 203, 192, 154, 224, 5, 135, 220, 105, 2,
    38, 199, 103, 17, 248, 17, 204, 241, 10, 181, 108, 175, 165, 135, 14, 3, 163, 127, 152, 196, 97, 109, 196, 92, 241, 5, 123, 87, 82,
    101, 250, 86, 145, 20, 41, 169, 103, 72, 37, 78, 199, 2, 167, 227, 8, 35, 20, 145, 4, 148, 74, 125, 41, 55, 61, 195, 83, 76, 161,
    195, 107, 133, 92, 27, 115, 17, 32, 218, 175, 126, 90, 151, 83, 124, 143, 112, 136, 76, 67, 55, 4, 167, 133, 75, 237, 228, 85, 253,
    185, 57, 93, 134, 58, 112, 91, 183, 159, 134, 14, 36, 119, 44, 139, 224, 80, 44, 131, 11, 216, 242, 176, 43, 28, 153, 81, 171, 169,
    8, 165, 170, 244, 102, 183, 161, 162, 199, 230, 70, 63, 76, 48, 0, 125, 203, 12, 174, 22, 45, 192, 98, 155, 133, 252, 172, 107, 164,
    47, 27, 208, 58, 238, 231, 16, 28, 129, 39, 253, 155, 153, 171, 136, 143, 29, 5, 38, 104, 209, 118, 170, 7, 35, 244, 210, 106, 238,
    153, 88, 222, 4, 21, 210, 105, 7, 132, 60, 87, 251, 228, 78, 22, 234, 82, 232, 100, 113, 168, 66, 196, 112, 168, 22, 131, 65, 170,
    40, 187, 191, 230, 116, 36, 162, 71, 63, 89, 252, 28, 203, 176, 195, 194, 55, 187, 62, 33, 34, 119, 19, 174, 68, 252, 97, 22, 227,
    38, 36, 134, 125, 95, 113, 82, 170, 60, 143, 75, 80, 206, 147, 152, 29, 55, 219, 175, 199, 51, 104, 200, 232, 110, 195, 234, 203,
    142, 171, 118, 65, 150, 29, 87, 116, 148, 207, 214, 129, 253, 248, 144, 126, 194, 142, 36, 73, 134, 121, 76, 196, 155, 103, 65, 243,
    83, 65, 254, 249, 170, 219, 218, 147, 84, 3, 32, 199, 180, 80, 255, 244, 181, 124, 107, 87, 9, 250, 162, 69, 150, 103, 50, 235, 103,
    116, 56, 123, 253, 218, 102, 65, 136, 79, 124, 12, 80, 147, 74, 128, 68, 134, 155, 148, 129, 33, 49, 73, 13, 170, 76, 191, 51, 243,
    180, 7, 58, 80, 28, 209, 125, 227, 164, 159, 3, 65, 3, 6, 70, 51, 62, 104, 195, 176, 59, 17, 149, 1, 104, 211, 104, 37, 140, 112,
    204, 83, 52, 103, 27, 16, 161, 116, 200, 148, 3, 129, 183, 164, 36, 108, 106, 0, 165, 111, 218, 132, 157, 57, 55, 103, 35, 136, 166,
    3, 180, 9, 42, 58, 150, 18, 81, 31, 152, 123, 117, 177, 26, 77, 236, 46, 25, 9, 142, 253, 140, 106, 103, 97, 0, 172, 114, 89, 4, 228,
    21, 121, 168, 18, 58, 155, 136, 60, 80, 159, 44, 212, 32, 199, 102, 21, 237, 193, 71, 12, 55, 144, 130, 67, 7, 38, 24, 88, 37, 137,
    52, 194, 177, 152, 186, 160, 108, 247, 151, 151, 125, 146, 28, 195, 252, 180, 162, 41, 16, 116, 99, 162, 223, 153, 11, 168, 114, 130,
    206, 75, 110, 19, 2, 76, 183, 59, 200, 81, 155, 192, 136, 193, 33, 103, 6, 132, 222, 75, 134, 214, 43, 201, 200, 164, 129, 185, 242,
    49, 60, 140, 171, 49, 115, 166, 180, 128, 164, 92, 49, 86, 5, 204, 177, 255, 9, 69, 29, 68, 90, 30, 73, 168, 216, 230, 112, 27, 84,
    46, 223, 68, 72, 48, 88, 86, 132, 210, 101, 178, 208, 194, 65, 243, 203, 45, 69, 103, 177, 133, 78, 217, 188, 101, 226, 64, 152, 186,
    1, 194, 243, 120, 82, 197, 80, 46, 184, 57, 160, 245, 234, 111, 211, 164, 88, 179, 197, 85, 25, 53, 195, 243, 19, 33, 92, 180, 38, 93,
    117, 20, 116, 230, 76, 120, 121, 206, 166, 244, 135, 168, 130, 171, 3, 73, 93, 167, 27, 182, 52, 130, 9, 124, 89, 109, 192, 218, 81,
    13, 160, 193, 220, 251, 97, 202, 136, 156, 27, 129, 15, 34, 7, 94, 48, 90, 172, 106, 26, 139, 204, 176, 140, 112, 128, 145, 226, 5,
    135, 221, 235, 142, 148, 140, 205, 78, 133, 8, 136, 65, 206, 250, 124, 45, 7, 64, 165, 174, 209, 144, 226, 150, 149, 188, 153, 124, 71,
    42, 193, 193, 50, 52, 150, 91, 5, 77, 23, 131, 230, 252, 89, 209, 252, 185, 56, 106, 71, 235, 149, 167, 199, 9, 83, 243, 166, 41, 94,
    36, 74, 229, 233, 60, 177, 113, 34, 42, 116, 137, 7, 187, 92, 185, 98, 127, 49, 178, 145, 33, 136, 60, 32, 84, 12, 90, 204, 85, 242, 8,
    99, 239, 138, 175, 185, 199, 156, 172, 193, 199, 97, 220, 116, 140, 179, 49, 173, 144, 195, 215, 249, 108, 149, 195, 40, 149, 230, 94,
    143, 200, 107, 81, 104, 202, 10, 170, 134, 44, 170, 196, 105, 112, 78, 34, 103, 105, 218, 56, 53, 198, 132, 148, 77, 37, 170, 135, 112,
    66, 159, 16, 160, 35, 148, 52, 101, 41, 149, 16, 107, 75, 128, 106, 74, 4, 87, 180, 25, 196, 119, 246, 28, 188, 87, 219, 24, 66, 25,
    189, 242, 247, 159, 58, 153, 12, 195, 195, 3, 69, 249, 143, 126, 214, 55, 155, 48, 99, 106, 162, 177, 123, 162, 27, 85, 234, 55, 170,
    198, 32, 202, 121, 61, 121, 19, 13, 175, 199, 177, 235, 226, 64, 68, 118, 159, 127, 243, 89, 23, 100, 169, 143, 170, 96, 112, 129,
    112, 95, 214, 32, 213, 145, 189, 70, 219, 127, 215, 183, 202, 125, 182, 125, 229, 128, 121, 204, 220, 118, 198, 104, 47, 151, 0, 130,
    180, 154, 71, 142, 185, 164, 199, 36, 157, 4, 245, 119, 223, 25, 85, 24, 200, 50, 114, 25, 181, 195, 213, 89, 6, 183, 126, 40, 233,
    59, 229, 240, 110, 65, 242, 81, 201, 122, 97, 55, 198, 187, 144, 40, 79, 193, 41, 40, 176, 154, 81, 175, 234, 149, 151, 145, 168, 49,
    183, 90, 187, 59, 153, 106, 85, 157, 222, 147, 84, 175, 201, 24, 175, 50, 39, 20, 166, 155, 58, 191, 89, 175, 80, 67, 16, 221, 51, 210,
    123, 126, 199, 122, 47, 145, 64, 58, 25, 89, 176, 153, 170, 195, 210, 118, 29, 70, 75];

var aesjs = require("aes-js");
var pkcs7 = require("pkcs7-padding");

export const Cipher = () => {
    const client = useClient();
    // get key again from server securely
    // generate a (c, ss) pair
    var output = new Array(2);
    output = K768_Encrypt(publicKey);

    // convert to hex string
    var hexStrC = bytesToHexStr(output[0]);
    var hexStrSS = bytesToHexStr(output[1]);

    // save in localStorage as hex strings
    localStorage.c_tmp = hexStrC;
    localStorage.ss_tmp = hexStrSS;

    // send hex string c to server and get cipher back
    client
        .query(
            `
            query {
              getCipher(cTmp:"` +
                hexStrC +
                `")
            }`
        )
        .toPromise()
        .then((result) => {
            // get back encrypted symmetric key from server
            // convert to byte array

            if (result.data.getCipher.length < 48) {
                console.log(
                    "Error: Key from server isn't correct. Check database."
                );
                return null;
            }

            var cipher = aesjs.utils.hex.toBytes(result.data.getCipher);

            var iv = cipher.slice(0, 16);
            if (iv.length !== 16) {
            } else {
                var encryptedBytes = cipher.slice(16, 48);
                // decrypt cipher using output[1]
                var aesCbc = new aesjs.ModeOfOperation.cbc(output[1], iv);
                var ss = aesCbc.decrypt(encryptedBytes);

                // convert to hex string and store
                localStorage.ss = bytesToHexStr(ss);
            }
        });

    return null;
};

function bytesToHexStr(c) {
    return c.reduce(
        (output, elem) => output + ("0" + elem.toString(16)).slice(-2),
        ""
    );
}

// decrypts data on frontend
export function DecryptData(input) {
    if (input.length === 0) {
        console.log(
            "Error: No encrypted data received from database. Check Words table in database."
        );
        return "";
    }

    // input is a hex string
    // convert to byte array
    var cipher = aesjs.utils.hex.toBytes(input);

    // get the iv
    var iv = cipher.slice(0, 16);

    // decrypt the cipher
    var output;
    if (iv.length !== 16) {
        output = "IV error";
    } else {
        var encryptedBytes = cipher.slice(16, cipher.length);

        // decrypt cipher using user's stored symmetric key
        var ssHex = localStorage.ss;

        // convert ss from hex string to byte array
        var ss = aesjs.utils.hex.toBytes(ssHex);

        var aesCbc = new aesjs.ModeOfOperation.cbc(ss, iv);
        output = aesCbc.decrypt(encryptedBytes);
    }

    // remove padding from decrypted string (PKCS7 padding scheme)
    var text = pkcs7.unpad(output);

    // convert bytes to plaintext
    var textUnpadded = aesjs.utils.utf8.fromBytes(text);

    return textUnpadded;
}
