package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{233, 138, 165, 42, 2, 176, 103, 18, 243, 165, 47, 93, 60, 170, 77, 39, 187, 197, 111, 242, 186, 119, 248, 49, 169, 8, 167, 246, 108, 208, 122, 14, 84, 12, 106, 238, 104, 255, 193, 239, 195, 88, 138, 30, 34, 231, 178, 217, 110, 99, 146, 187, 218, 116, 217, 215, 253, 63, 27, 158, 115, 87, 95, 231, 123, 216, 146, 248, 233, 235, 93, 121, 133, 193, 41, 71, 240, 92, 183, 209, 247, 72, 163, 67, 53, 0, 250, 126, 111, 84, 34, 77, 252, 241, 42, 45, 234, 213, 102, 244, 51, 80, 247, 17, 162, 96, 220, 127, 108, 197, 136, 1, 120, 251, 138, 92, 117, 33, 30, 8, 187, 165, 178, 247, 229, 214, 82, 184, 142, 80, 157, 113, 105, 141, 191, 82, 161, 147, 214, 35, 192, 107, 134, 22, 194, 46, 36, 6, 244, 0, 208, 222, 117, 234, 74, 9, 250, 52, 8, 188, 88, 59, 171, 162, 232, 142, 119, 95, 169, 70, 173, 81, 88, 82, 21, 255, 13, 16, 145, 10, 48, 54, 153, 241, 138, 246, 143, 98, 185, 71, 152, 226, 41, 53, 131, 181, 246, 153, 51, 45, 153, 87, 49, 0, 131, 29, 181, 18, 238, 183, 232, 227, 100, 175, 232, 107, 35, 84, 248, 17, 109, 255, 29, 9, 219, 50, 169, 205, 14, 149, 129, 161, 91, 212, 33, 112, 15, 90, 153, 128, 33, 53, 181, 125, 81, 67, 72, 66, 35, 208, 188, 8, 190, 59, 220, 81, 239, 82, 32, 95, 132, 137, 175, 197, 119, 20, 151, 13, 222, 181, 152, 109, 98, 34, 233, 126, 210, 151, 47, 254, 201, 206, 201, 187, 166, 3, 28, 118, 239, 6, 80, 143, 208, 74, 148, 93, 99, 147, 30, 254, 132, 85, 5, 211, 204, 72, 30, 120, 202, 141, 73, 101, 28, 246, 225, 99, 253, 172, 87, 214, 151, 26, 86, 99, 212, 226, 188, 181, 119, 209, 149, 78, 153, 131, 182, 85, 112, 132, 192, 235, 101, 51, 98, 6, 58, 239, 133, 127, 91, 42, 95, 163, 205, 94, 251, 48, 47, 68, 31, 198, 171, 185, 62, 21, 253, 166, 62, 163, 144, 67, 6, 236, 219, 18, 17, 81, 242, 43, 200, 207, 44, 91, 59, 79, 206, 78, 196, 118, 67, 235, 90, 75, 61, 71, 103, 95, 2, 136, 81, 44, 64, 13, 89, 199, 118, 59, 252, 251, 21, 130, 178, 199, 37, 199, 33, 254, 138, 249, 195, 29, 245, 92, 152, 213, 47, 108, 237, 75, 156, 192, 174, 226, 170, 78, 4, 149, 92, 142, 145, 141, 115, 61, 122, 189, 76, 114, 88, 188, 17, 129, 85, 196, 156, 174, 31, 237, 134, 94, 25, 141, 214, 47, 171, 32, 136, 53, 90, 93, 47, 127, 208, 191, 109, 49, 57, 27, 147, 45, 230, 118, 173, 109, 154, 249, 120, 155, 83, 174, 112, 151, 230, 115, 22, 30, 123, 147, 209, 109, 193, 58, 222, 37, 56, 232, 85, 220, 104, 184, 83, 221, 183, 80, 214, 208, 202, 103, 77, 137, 46, 166, 108, 176, 77, 7, 196, 194, 226, 245, 237, 163, 37, 79, 105, 163, 232, 184, 229, 118, 147, 246, 221, 216, 224, 49, 102, 227, 242, 227, 58, 152, 73, 105, 63, 210, 157, 13, 252, 46, 18, 161, 96, 186, 121, 236, 87, 65, 80, 31, 21, 165, 216, 140, 172, 169, 83, 6, 239, 15, 85, 6, 27, 239, 214, 29, 206, 133, 31, 31, 248, 178, 223, 6, 55, 2, 99, 207, 131, 23, 211, 123, 190, 27, 142, 245, 164, 165, 133, 84, 84, 17, 154, 165, 8, 108, 43, 204, 216, 156, 160, 223, 83, 106, 110, 69, 104, 65, 115, 175, 78, 42, 226, 70, 178, 47, 150, 187, 200, 69, 135, 18, 22, 48, 57, 147, 61, 76, 40, 106, 208, 4, 159, 142, 94, 213, 152, 26, 108, 183, 104, 194, 233, 64, 34, 122, 56, 144, 203, 83, 83, 12, 145, 223, 207, 49, 132, 69, 74, 79, 243, 45, 31, 155, 104, 96, 251, 28, 119, 165, 246, 176, 90, 229, 89, 80, 212, 108, 246, 127, 144, 205, 192, 233, 95, 235, 67, 226, 255, 37, 238, 91, 90, 176, 215, 14, 114, 246, 112, 128, 239, 119, 140, 53, 175, 90, 17, 213, 249, 115, 43, 106, 174, 116, 14, 17, 44, 135, 118, 138, 218, 212, 195, 248, 126, 205, 69, 113, 239, 155, 149, 93, 165, 92, 252, 94, 20, 113, 228, 123, 65, 132, 6, 106, 74, 5, 226, 10, 128, 118, 202, 109, 229, 2, 255, 194, 243, 247, 53, 68, 152, 3, 179, 131, 90, 47, 181, 96, 2, 179, 8, 125, 150, 223, 99, 246, 222, 103, 35, 55, 64, 115, 86, 187, 34, 247, 117, 246, 242, 198, 148, 16, 168, 163, 43, 86, 81, 221, 129, 142, 32, 153, 250, 73, 113, 108, 64, 211, 91, 191, 229, 197, 226, 66, 214, 61, 159, 229, 38, 3, 18, 24, 207, 115, 101, 23, 135, 132, 16, 48, 134, 136, 124, 3, 48, 182, 4, 91, 69, 76, 61, 126, 95, 104, 133, 164, 134, 82, 218, 36, 149, 72, 72, 12, 177, 155, 124, 140, 106, 14, 28, 226, 129, 8, 140, 179, 144, 237, 30, 202, 249, 157, 174, 70, 92, 251, 161, 105, 59, 68, 205, 8, 221, 233, 69, 28, 230, 135, 97, 13, 60, 3, 114, 40, 138, 213, 119, 44, 188, 216, 185, 210, 153, 36, 115, 186, 215, 169, 200, 135, 96, 43, 89, 81, 233, 231, 183, 39, 54, 253, 111, 130, 75, 172, 182, 198, 52, 8, 91, 31, 187, 11, 232, 140, 220, 117, 238, 18, 13, 34, 148, 116, 206, 43, 66, 21, 244, 96, 20, 65, 232, 67, 28, 252, 141, 228, 20, 67, 71, 185, 19, 135, 155, 3, 9, 71, 63, 155, 188, 16, 249, 39, 102, 231, 173, 46, 106, 5, 92, 205, 26, 65, 180, 58, 38, 41, 210, 52, 192, 19, 109, 243, 105, 255, 195, 173, 84, 36, 143, 160, 253, 144, 22, 195, 37, 111, 117, 191, 39, 248, 200, 60, 175, 107, 240, 82, 121, 190, 50, 118, 210, 49, 127, 218, 32, 34, 140, 158, 2, 94, 184, 163, 81, 220, 235, 219, 212, 133, 128, 91, 87, 139, 65, 246, 25, 47, 167, 1, 72, 236, 104, 217, 11, 32, 64, 74, 143, 56, 218, 81, 136, 42, 89, 248, 58, 108, 252, 45, 104, 101}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	// it works!
	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encryptData(input string, key string, db *gorm.DB) (output string) {

	//get token from database
	var tokendb model.User
	err := db.Where("id = ?", email).First(&tokendb).Error
	//error handling
	if err != nil {
		return nil, err
	}








	// encrypt data with the user's symmetric key
	// convert hex string to byte array
	ss, _ := hex.DecodeString(key)

	// cipher = encrypt(ss, input)
	// ss is key, input is message
	block, err := aes.NewCipher(ss)
	if err != nil {
		log.Printf("%s Error in aes.NewCipher", consts.Error)
		return "", nil
	}

	// convert input string to byte array
	inputBytes := []byte(input)

	// The IV needs to be unique, but not secure. Therefore it's common to
	// include it at the beginning of the ciphertext.
	ciphertext := make([]byte, aes.BlockSize+len(inputBytes))
	iv := ciphertext[:aes.BlockSize]
	if _, err := io.ReadFull(rand.Reader, iv); err != nil {
		log.Printf("%s Error in aes rand numbers", consts.Error)
		return "", nil
	}

	mode := cipher.NewCBCEncrypter(block, iv)
	mode.CryptBlocks(ciphertext[aes.BlockSize:], inputBytes)

	// cipher []byte to hex string
	cipherHex := hex.EncodeToString(ciphertext[:])

	output := cipherHex

	return output
}

// probably dont need this function for now
func decryptData(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encryptData(token.AccessToken)
	return nil
}

/* Token hooks */
