package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{29,36,191,108,3,94,44,127,96,251,130,93,196,30,55,80,69,227,253,96,232,14,69,156,239,43,27,189,188,174,171,168,63,8,46,101,130,91,136,199,101,209,246,111,178,255,157,109,233,194,92,154,171,142,58,126,125,173,123,11,73,76,188,2,244,35,37,33,12,12,44,142,225,73,180,27,107,71,24,84,78,107,195,4,214,140,153,219,178,203,219,2,34,67,64,115,106,61,60,120,121,105,191,45,219,75,101,96,14,93,67,179,225,184,183,162,134,238,233,38,52,10,55,75,211,227,1,5,223,213,198,39,21,158,219,18,42,10,48,95,113,1,178,79,217,226,158,83,231,110,53,204,65,69,246,38,41,7,212,14,220,201,172,206,72,87,186,177,253,249,209,194,59,172,132,153,152,217,148,240,122,206,54,176,120,207,91,96,52,227,232,85,220,32,233,103,217,78,206,152,92,116,147,54,240,226,65,120,100,84,27,192,63,225,234,111,178,67,208,75,205,3,190,224,238,158,229,149,110,69,212,189,179,204,32,90,21,224,58,228,223,113,192,81,100,153,183,110,3,150,142,245,166,54,25,178,191,165,222,208,120,187,200,16,15,103,178,237,227,57,200,34,163,175,62,166,20,4,202,229,97,122,92,67,46,111,235,121,213,248,40,225,28,83,237,85,171,62,139,29,125,198,202,17,40,11,142,145,221,135,197,199,144,22,147,217,133,37,2,76,189,130,124,20,34,210,206,197,128,69,165,126,81,23,140,234,91,201,36,144,111,184,49,38,88,196,178,98,182,90,118,56,248,82,62,10,111,233,92,120,57,99,71,51,49,12,128,52,169,16,126,59,135,7,137,41,108,99,237,98,99,182,134,149,91,219,248,41,230,138,164,191,88,141,180,130,15,235,253,104,253,203,190,21,122,201,65,44,126,156,79,197,39,49,93,73,96,147,112,249,139,237,186,233,197,202,190,248,19,248,152,227,62,94,200,45,207,252,131,92,250,75,242,3,122,161,33,96,66,228,106,191,152,47,94,204,213,168,158,124,136,198,149,78,87,151,152,152,118,6,207,233,112,103,246,110,240,102,127,80,73,224,55,56,181,137,234,27,222,80,167,86,146,117,129,91,172,40,76,71,235,8,191,68,155,21,137,159,240,91,132,73,92,138,86,212,251,191,92,203,76,160,174,43,124,12,38,97,235,220,197,37,20,67,83,189,18,21,171,10,172,184,56,193,28,38,227,137,67,204,139,204,13,19,95,132,171,254,202,118,165,120,142,155,221,133,88,234,1,186,150,156,191,120,79,46,238,176,236,49,133,52,88,238,226,72,248,133,179,24,113,101,10,31,32,14,28,70,15,220,224,86,173,227,238,119,155,112,222,187,228,61,61,227,26,48,107,137,220,122,41,237,58,56,116,184,223,151,215,118,95,15,229,98,239,28,166,250,50,23,55,41,176,127,234,138,127,241,91,218,247,80,226,99,177,141,33,31,205,129,39,64,106,250,26,215,175,40,192,241,160,198,178,167,203,186,210,56,25,219,5,136,182,42,101,182,83,176,187,222,71,240,213,103,153,165,104,44,4,135,4,53,109,77,22,182,236,184,182,201,244,165,61,107,54,247,247,239,55,170,113,5,163,32,114,189,34,175,190,122,53,101,195,30,152,218,142,179,139,36,7,199,207,11,21,68,188,224,124,62,161,218,125,28,47,128,236,47,60,159,138,119,160,173,94,45,205,168,245,237,21,113,106,239,246,255,35,116,174,157,172,21,111,198,215,19,25,12,4,148,248,118,93,74,151,246,203,86,58,170,44,214,185,12,109,134,127,228,69,42,142,5,252,170,13,254,136,4,182,89,55,70,222,54,57,218,220,218,31,103,202,150,195,95,216,188,52,81,153,0,22,113,24,150,227,229,46,72,94,64,148,129,211,181,114,84,17,239,252,73,170,207,164,227,192,30,185,20,17,220,107,16,18,137,157,95,3,89,87,33,52,37,232,64,125,149,195,225,238,170,245,1,242,7,10,131,208,243,45,197,94,75,12,176,182,128,148,133,208,218,136,209,63,88,55,41,41,145,89,58,235,192,149,63,219,174,233,44,76,23,131,110,235,73,197,192,200,142,3,153,57,110,243,101,228,153,196,117,232,5,15,44,78,245,7,186,220,169,164,1,156,22,101,104,11,146,182,127,147,71,185,175,4,13,53,208,195,72,179,150,42,109,49,113,71,144,141,192,232,171,129,2,108,46,20,145,240,228,84,176,3,247,206,225,240,218,38,187,216,242,139,202,131,194,154,56,244,6,149,68,24,74,47,61,104,247,176,141,201,88,22,187,101,30,97,159,42,143,25,37,171,31,15,223,205,82,235,28,110,221,99,127,233,190,232,83,249,142,184,126,63,114,78,71,190,148,14,192,108,206,184,57,130,237,99,167,220,7,87,45,199,228,205,118,95,161,213,218}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
