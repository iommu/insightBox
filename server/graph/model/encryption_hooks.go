package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{172, 224, 86, 103, 167, 172, 117, 160, 173, 152, 181, 64, 99, 244, 241, 14, 123, 18, 186, 218, 94, 208, 111, 131, 199, 248, 237, 179, 13, 112, 15, 51, 49, 212, 213, 141, 220, 83, 251, 114, 124, 157, 4, 8, 4, 249, 154, 134, 73, 84, 43, 187, 18, 131, 141, 104, 214, 37, 103, 214, 10, 254, 70, 57, 1, 96, 224, 150, 13, 2, 130, 172, 241, 19, 94, 187, 170, 34, 71, 167, 90, 237, 107, 248, 181, 101, 182, 7, 42, 87, 75, 89, 149, 102, 137, 83, 35, 42, 45, 76, 83, 216, 129, 44, 50, 182, 85, 57, 248, 13, 136, 142, 55, 234, 188, 94, 223, 57, 246, 3, 3, 30, 142, 130, 61, 77, 201, 122, 190, 121, 205, 228, 16, 231, 17, 87, 10, 175, 200, 168, 6, 238, 156, 38, 159, 93, 165, 184, 133, 226, 179, 188, 200, 11, 69, 128, 112, 191, 181, 219, 225, 107, 87, 213, 234, 98, 173, 60, 193, 165, 129, 25, 158, 215, 112, 186, 239, 182, 225, 41, 158, 229, 171, 196, 164, 29, 2, 157, 79, 31, 62, 186, 102, 84, 170, 26, 104, 76, 163, 244, 39, 212, 165, 249, 242, 149, 224, 217, 183, 121, 25, 177, 158, 217, 19, 23, 170, 74, 251, 111, 10, 126, 66, 21, 1, 61, 160, 244, 125, 197, 37, 184, 202, 6, 107, 198, 1, 213, 14, 207, 142, 172, 22, 39, 41, 124, 116, 195, 125, 67, 51, 123, 14, 1, 72, 25, 114, 251, 214, 176, 146, 28, 193, 200, 82, 152, 187, 225, 47, 194, 5, 46, 227, 223, 101, 194, 109, 255, 184, 65, 231, 88, 33, 189, 6, 150, 44, 233, 220, 87, 92, 81, 139, 55, 139, 160, 239, 95, 168, 175, 190, 55, 23, 66, 5, 149, 41, 11, 212, 142, 197, 250, 238, 1, 33, 141, 104, 142, 36, 135, 206, 130, 48, 4, 156, 33, 106, 160, 143, 33, 130, 104, 15, 114, 252, 231, 149, 161, 166, 1, 34, 75, 142, 108, 168, 58, 137, 166, 135, 122, 202, 115, 19, 87, 59, 244, 248, 39, 94, 225, 46, 228, 13, 24, 58, 186, 59, 206, 44, 245, 66, 92, 223, 132, 3, 111, 57, 130, 123, 50, 41, 38, 215, 53, 117, 241, 89, 78, 196, 221, 216, 142, 244, 172, 42, 158, 75, 170, 196, 36, 201, 187, 241, 80, 63, 227, 54, 41, 127, 172, 221, 69, 95, 127, 159, 252, 70, 82, 206, 169, 142, 83, 158, 112, 201, 87, 184, 90, 26, 181, 164, 193, 54, 227, 206, 94, 221, 42, 210, 195, 63, 47, 120, 196, 39, 245, 89, 251, 146, 165, 5, 85, 41, 239, 98, 209, 230, 111, 54, 166, 85, 5, 52, 34, 17, 122, 216, 236, 207, 112, 213, 76, 165, 192, 57, 153, 115, 228, 255, 91, 11, 138, 247, 178, 170, 152, 5, 68, 199, 205, 118, 53, 5, 191, 16, 134, 65, 154, 31, 241, 19, 114, 195, 228, 81, 101, 3, 130, 108, 76, 20, 77, 26, 15, 75, 238, 173, 244, 44, 133, 222, 244, 243, 61, 219, 15, 151, 22, 29, 203, 159, 99, 74, 239, 71, 21, 139, 50, 55, 135, 117, 129, 27, 83, 37, 228, 101, 38, 123, 148, 98, 54, 8, 252, 127, 210, 177, 74, 65, 220, 193, 232, 222, 205, 164, 137, 99, 46, 64, 100, 190, 80, 179, 138, 164, 227, 10, 243, 225, 31, 197, 103, 243, 181, 150, 100, 177, 112, 53, 126, 66, 84, 203, 66, 201, 244, 76, 94, 23, 46, 25, 228, 158, 209, 144, 11, 3, 114, 37, 129, 174, 47, 90, 70, 70, 232, 17, 239, 195, 104, 137, 188, 60, 156, 101, 141, 174, 226, 91, 36, 18, 147, 183, 21, 98, 124, 185, 70, 53, 108, 17, 133, 14, 225, 147, 214, 117, 84, 75, 75, 46, 81, 61, 150, 113, 27, 84, 106, 160, 3, 0, 153, 31, 157, 149, 247, 154, 50, 14, 58, 37, 85, 73, 246, 207, 28, 183, 20, 55, 143, 12, 196, 219, 51, 235, 172, 181, 90, 149, 230, 233, 33, 21, 57, 145, 12, 93, 245, 253, 157, 158, 247, 181, 184, 40, 35, 228, 221, 0, 86, 149, 103, 59, 13, 108, 182, 149, 106, 167, 255, 136, 184, 41, 4, 242, 102, 197, 137, 31, 192, 114, 217, 195, 58, 155, 65, 43, 112, 237, 73, 199, 125, 188, 174, 79, 238, 93, 149, 207, 10, 46, 117, 99, 213, 39, 190, 161, 167, 168, 108, 4, 211, 10, 61, 62, 226, 198, 83, 154, 138, 191, 164, 146, 100, 71, 215, 116, 98, 40, 247, 13, 191, 209, 71, 189, 190, 100, 236, 40, 52, 151, 142, 227, 161, 95, 34, 8, 161, 79, 77, 36, 233, 190, 62, 133, 192, 252, 58, 56, 20, 142, 138, 117, 212, 12, 224, 41, 72, 209, 240, 42, 240, 155, 216, 117, 191, 72, 155, 239, 33, 56, 86, 162, 39, 254, 204, 30, 130, 64, 45, 117, 92, 61, 176, 115, 5, 215, 255, 106, 134, 195, 81, 201, 247, 87, 110, 137, 111, 197, 108, 86, 150, 108, 26, 34, 222, 183, 153, 19, 85, 237, 253, 247, 1, 241, 146, 211, 43, 198, 1, 134, 128, 40, 192, 158, 146, 205, 75, 233, 27, 92, 58, 158, 91, 159, 28, 18, 32, 161, 183, 141, 84, 66, 207, 231, 58, 160, 94, 251, 190, 180, 121, 110, 150, 197, 21, 103, 43, 87, 117, 141, 45, 172, 183, 106, 182, 155, 5, 82, 60, 236, 91, 84, 8, 171, 191, 15, 255, 119, 98, 31, 251, 249, 233, 25, 129, 165, 64, 129, 116, 17, 34, 167, 37, 243, 221, 83, 214, 194, 98, 31, 64, 106, 21, 210, 28, 86, 192, 7, 225, 27, 248, 34, 20, 80, 21, 38, 110, 66, 77, 70, 122, 97, 36, 220, 207, 235, 194, 26, 222, 181, 97, 100, 27, 127, 209, 250, 90, 161, 206, 19, 90, 110, 179, 9, 194, 198, 166, 184, 80, 183, 200, 125, 47, 112, 69, 193, 253, 188, 213, 9, 91, 159, 208, 76, 51, 165, 30, 161, 88, 212, 156, 53, 134, 143, 41, 221, 86, 45, 4, 154, 94, 53, 122, 109, 135, 165, 82, 43, 81, 30, 32, 186, 203, 87, 178, 55, 126, 136, 22, 208, 39, 50, 129, 194, 66, 15, 140, 249, 200, 219, 89, 93, 9, 65, 16, 54, 238, 136, 99, 231, 23, 159, 167, 100, 82, 137, 65}

	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
