package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{44, 27, 6, 249, 21, 231, 204, 108, 102, 149, 70, 225, 102, 94, 99, 74, 164, 187, 61, 141, 155, 185, 193, 178, 251, 157, 1, 169, 99, 109, 29, 56, 65, 152, 117, 206, 46, 5, 22, 5, 138, 135, 149, 242, 212, 239, 63, 119, 90, 134, 139, 212, 255, 80, 217, 111, 188, 240, 50, 236, 35, 129, 214, 96, 158, 150, 128, 112, 85, 178, 193, 91, 170, 172, 124, 222, 199, 106, 203, 129, 129, 136, 127, 103, 159, 175, 209, 166, 68, 141, 52, 79, 250, 251, 94, 188, 98, 245, 211, 253, 166, 169, 91, 25, 231, 37, 237, 138, 60, 11, 103, 28, 101, 81, 250, 35, 131, 177, 167, 44, 120, 38, 159, 0, 69, 50, 154, 185, 126, 235, 11, 196, 205, 197, 254, 241, 208, 189, 38, 132, 135, 37, 146, 243, 80, 2, 212, 33, 249, 167, 162, 93, 36, 212, 158, 72, 212, 35, 21, 26, 70, 176, 23, 179, 250, 218, 151, 119, 170, 84, 43, 249, 218, 139, 110, 7, 60, 204, 129, 166, 162, 15, 131, 138, 118, 125, 206, 83, 27, 178, 9, 140, 207, 163, 94, 128, 169, 153, 216, 118, 219, 56, 17, 16, 183, 16, 164, 77, 10, 73, 119, 116, 238, 194, 190, 68, 53, 199, 138, 50, 120, 178, 4, 9, 193, 31, 235, 226, 72, 132, 154, 241, 35, 9, 1, 47, 113, 136, 87, 156, 15, 138, 41, 45, 224, 36, 113, 230, 135, 84, 232, 3, 203, 35, 253, 189, 224, 94, 245, 81, 78, 132, 219, 223, 55, 211, 221, 248, 255, 163, 5, 28, 109, 175, 153, 184, 144, 45, 31, 233, 98, 233, 138, 193, 75, 71, 84, 166, 176, 47, 190, 135, 111, 156, 69, 3, 4, 148, 2, 134, 244, 97, 234, 91, 60, 135, 21, 68, 73, 26, 59, 177, 185, 37, 66, 137, 234, 252, 246, 143, 125, 84, 5, 131, 17, 244, 172, 50, 192, 53, 99, 219, 130, 111, 52, 37, 220, 237, 165, 172, 184, 85, 37, 191, 140, 243, 84, 116, 125, 153, 237, 223, 106, 137, 106, 190, 105, 3, 63, 219, 139, 68, 82, 190, 229, 169, 128, 215, 94, 226, 158, 198, 244, 152, 162, 112, 148, 215, 202, 100, 144, 146, 70, 4, 105, 11, 9, 113, 14, 117, 224, 101, 18, 244, 132, 184, 94, 82, 122, 235, 72, 137, 234, 220, 159, 62, 124, 117, 239, 235, 190, 111, 110, 192, 102, 250, 222, 66, 230, 96, 228, 193, 229, 223, 98, 39, 147, 124, 39, 151, 239, 168, 46, 66, 145, 33, 146, 179, 101, 163, 217, 125, 94, 121, 22, 133, 16, 103, 106, 73, 13, 90, 175, 118, 209, 88, 60, 45, 153, 13, 51, 118, 73, 115, 68, 199, 255, 136, 250, 223, 87, 126, 150, 83, 27, 191, 216, 249, 200, 185, 70, 254, 112, 156, 142, 150, 15, 101, 167, 203, 139, 141, 52, 231, 98, 143, 229, 139, 142, 37, 133, 122, 113, 184, 8, 247, 2, 191, 92, 202, 2, 232, 7, 152, 224, 67, 51, 207, 139, 145, 121, 240, 128, 174, 246, 140, 113, 75, 101, 174, 226, 187, 186, 145, 252, 174, 40, 13, 92, 118, 69, 52, 132, 58, 16, 115, 197, 0, 74, 147, 197, 64, 237, 125, 180, 103, 210, 101, 44, 1, 205, 22, 79, 222, 55, 151, 5, 163, 42, 80, 187, 248, 211, 167, 75, 98, 22, 152, 11, 137, 159, 156, 6, 54, 101, 112, 156, 55, 43, 108, 138, 27, 127, 118, 23, 57, 188, 190, 35, 90, 220, 207, 77, 176, 88, 23, 150, 4, 223, 95, 195, 29, 54, 50, 183, 180, 71, 16, 183, 0, 63, 37, 213, 123, 44, 31, 34, 107, 22, 109, 80, 54, 230, 25, 247, 220, 137, 0, 139, 224, 11, 85, 114, 44, 117, 85, 157, 167, 172, 27, 65, 207, 250, 120, 31, 189, 240, 165, 123, 141, 209, 245, 28, 229, 248, 47, 27, 184, 199, 32, 78, 26, 24, 97, 72, 58, 146, 175, 174, 167, 28, 53, 162, 208, 140, 2, 57, 76, 143, 108, 82, 117, 224, 252, 188, 95, 54, 255, 247, 38, 239, 93, 226, 2, 184, 77, 22, 87, 93, 87, 247, 179, 161, 238, 184, 43, 21, 165, 143, 145, 249, 204, 168, 122, 107, 102, 32, 135, 181, 33, 195, 114, 117, 198, 7, 176, 33, 217, 228, 148, 252, 214, 232, 162, 241, 61, 128, 178, 47, 36, 28, 95, 76, 31, 219, 59, 25, 255, 13, 219, 146, 116, 54, 11, 104, 209, 2, 215, 10, 101, 61, 200, 149, 62, 96, 87, 182, 176, 241, 113, 147, 106, 25, 20, 15, 232, 4, 229, 216, 245, 254, 110, 69, 3, 8, 2, 65, 137, 4, 117, 185, 133, 145, 20, 193, 131, 194, 113, 240, 185, 185, 154, 227, 123, 251, 100, 225, 149, 75, 8, 140, 238, 155, 145, 150, 250, 238, 140, 102, 53, 180, 100, 84, 198, 155, 195, 87, 88, 117, 166, 41, 114, 122, 111, 200, 34, 86, 174, 7, 207, 181, 220, 79, 184, 120, 75, 220, 12, 139, 210, 209, 73, 253, 43, 43, 245, 156, 186, 54, 10, 253, 207, 145, 90, 13, 106, 160, 36, 174, 74, 56, 46, 151, 194, 3, 130, 224, 154, 212, 129, 43, 112, 118, 144, 19, 85, 211, 120, 224, 214, 48, 92, 196, 154, 242, 98, 151, 80, 147, 232, 113, 149, 29, 4, 137, 106, 63, 58, 197, 140, 225, 152, 126, 69, 240, 77, 204, 170, 30, 247, 45, 16, 89, 231, 141, 82, 102, 222, 197, 203, 116, 97, 147, 233, 89, 181, 151, 150, 14, 173, 83, 173, 135, 144, 152, 26, 7, 190, 244, 226, 8, 127, 165, 51, 172, 71, 193, 89, 61, 57, 107, 212, 30, 19, 135, 20, 214, 38, 42, 155, 110, 44, 213, 227, 19, 138, 193, 2, 80, 166, 75, 164, 104, 128, 101, 77, 148, 87, 141, 193, 128, 208, 20, 193, 183, 213, 220, 134, 69, 152, 25, 145, 243, 27, 206, 22, 159, 166, 16, 156, 205, 26, 4, 134, 172, 245, 239, 245, 242, 19, 21, 127, 87, 84, 180, 167, 120, 26, 152, 253, 212, 226, 158, 68, 196, 134, 75, 132, 203, 3, 52, 179, 246, 86, 94, 39, 124, 58, 44, 212, 115, 255, 126, 99, 4, 57, 165, 80, 225, 135, 210, 167, 25, 138, 125, 104, 22, 82, 210, 90, 175, 186, 16, 21, 46, 202, 120, 162}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
