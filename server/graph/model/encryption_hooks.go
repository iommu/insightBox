package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{30,232,73,127,47,235,229,165,24,28,30,206,255,20,175,210,71,90,65,108,224,85,107,194,64,51,40,27,21,97,22,173,43,18,18,152,105,12,165,46,3,167,27,157,198,42,183,43,52,125,200,130,54,243,12,27,86,88,176,204,142,90,50,108,225,14,177,44,111,198,33,125,89,106,254,51,95,89,198,214,120,232,19,64,114,158,188,28,14,104,20,20,181,10,233,73,77,238,72,225,120,222,119,50,117,6,81,65,153,153,25,15,83,66,104,148,93,20,16,133,65,1,39,82,20,52,34,158,130,46,19,219,11,226,168,100,152,59,170,5,88,247,34,200,170,186,63,124,152,212,48,139,156,78,91,192,180,240,135,139,104,89,208,4,52,160,160,169,216,112,114,35,40,36,247,137,81,24,95,188,167,49,245,178,85,230,242,203,26,58,247,217,239,47,22,126,198,203,112,157,17,77,150,99,87,176,184,217,80,47,4,55,142,252,205,212,1,191,180,255,138,49,118,217,126,158,235,146,48,3,84,252,128,172,60,105,84,50,199,53,15,235,94,89,68,156,119,185,210,187,153,93,69,58,115,53,33,10,142,73,234,147,54,84,69,135,46,252,191,208,202,110,82,159,42,201,3,139,150,159,155,34,201,100,174,80,248,251,201,178,88,206,245,85,127,226,55,48,10,255,3,70,150,130,165,34,4,204,140,78,55,216,157,49,202,220,44,84,37,102,166,66,135,224,2,247,178,52,38,13,1,71,76,248,231,222,239,114,77,123,82,42,128,45,86,206,220,140,64,91,33,153,216,177,185,203,25,182,114,19,235,61,9,197,217,34,181,80,189,233,156,71,244,187,181,89,237,43,68,7,110,43,37,129,130,213,41,242,227,114,248,112,81,83,236,200,215,101,33,47,46,238,177,44,77,14,248,206,67,90,36,199,51,249,43,118,136,6,1,113,200,244,243,229,78,195,167,152,97,43,87,51,215,151,74,20,25,232,229,193,176,151,181,121,70,144,103,145,204,58,16,24,62,122,141,166,70,99,14,237,90,13,200,233,223,79,63,142,16,27,251,246,14,1,161,185,190,88,9,159,156,202,91,253,190,250,136,253,118,79,43,53,164,235,96,79,167,72,132,36,146,6,205,5,195,128,214,60,128,15,132,157,186,82,216,254,147,12,49,142,87,90,166,85,71,211,205,74,196,47,100,115,18,212,174,2,66,168,1,191,153,83,167,154,101,164,149,151,252,39,212,242,50,207,150,221,250,200,88,135,14,51,105,196,1,128,61,8,64,23,207,142,138,231,61,240,82,118,131,230,157,222,212,24,230,233,140,200,28,45,70,92,189,255,12,76,187,83,117,59,206,31,154,222,197,123,19,226,134,45,237,211,86,83,41,23,13,11,138,90,43,33,10,168,142,96,38,141,240,243,167,208,164,166,229,104,49,57,195,202,133,29,57,108,184,17,250,28,122,147,228,75,78,187,102,32,24,4,193,121,198,23,112,76,111,147,63,196,179,10,228,11,94,114,73,14,92,175,45,21,73,197,105,95,27,178,212,32,104,45,153,123,134,91,137,144,172,63,103,172,194,100,225,66,252,25,89,124,186,70,188,198,85,106,133,239,220,108,20,231,123,204,211,30,172,54,37,127,183,37,119,99,138,111,154,149,229,175,137,118,77,176,82,80,92,155,177,26,86,130,101,155,141,154,229,104,92,110,45,89,168,233,47,165,27,157,109,63,224,146,3,91,162,50,39,101,120,27,27,189,126,194,215,55,216,204,54,151,50,141,176,117,236,203,105,150,61,102,109,103,172,163,154,222,168,39,122,238,126,67,20,158,228,157,212,54,176,112,70,248,112,221,124,141,21,109,74,207,230,211,34,122,194,138,238,189,171,147,79,52,178,229,133,164,151,185,225,6,238,40,55,148,218,151,198,187,205,165,143,254,81,9,217,167,122,153,56,65,76,244,144,208,38,148,179,41,188,61,153,65,88,62,21,155,204,55,229,114,203,88,154,80,194,242,172,7,8,196,141,227,16,38,71,23,121,241,195,68,243,76,237,177,121,227,73,89,238,141,14,24,20,73,47,219,11,6,225,5,9,189,107,180,75,236,71,238,12,28,145,175,94,143,207,69,121,194,15,29,32,25,134,124,58,68,20,233,113,165,158,240,29,190,236,142,195,157,235,112,4,149,87,107,121,84,99,241,98,158,57,189,176,146,111,38,49,75,140,209,14,179,38,90,95,137,229,204,209,105,184,194,227,105,57,50,127,106,247,171,181,87,11,42,92,189,46,43,19,2,209,51,80,225,142,57,175,73,247,142,210,125,137,111,69,148,12,205,30,250,169,141,202,253,222,51,75,56,58,136,10,45,191,232,153,241,32,112,27,69,36,6,187,237,16,94,148,111,255,69,172,195,26,173,99,124,77,145,163,147,148,204,21,213,188,237,71,144,38,116}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
