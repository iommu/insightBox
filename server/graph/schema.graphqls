type Token {
  id: ID! #same as user token
  access_token: String!
  token_type: String!
  refresh_token: String!
  expiry: Time!
}

type User {
  id: ID! #is their email
  given_name: String!
  family_name: String!
  picture: String!
  locale: String! 
  color_scheme_id: Int!
  secret_key: String!
}

type Day {
  # vvv DO NOT CHANGE
  id: ID!
  date: Time!
  # ^^^ DO NOT CHANGE
  sent: Int!
  received: Int!
  words: [Word!]!
  # vvv BELOW IS COUNTING PER HOUR
  received_0: Int!
  received_1: Int!
  received_2: Int!
  received_3: Int!
  received_4: Int!
  received_5: Int!
  received_6: Int!
  received_7: Int!
  received_8: Int!
  received_9: Int!
  received_10: Int!
  received_11: Int!
  received_12: Int!
  received_13: Int!
  received_14: Int!
  received_15: Int!
  received_16: Int!
  received_17: Int!
  received_18: Int!
  received_19: Int!
  received_20: Int!
  received_21: Int!
  received_22: Int!
  received_23: Int!
}

type Word {
  id: ID!
  date: Time!
  text: String!
  value: Int!
}

type Email {
  id: ID!
  date: Time!
  poi_email: String!
  sent: Int!
  received: Int!
}

type Mutation {
  signIn(authCode: String!): String! #takes in oauth key, returns JWT string
  deleteAccount(email: String!): Int! #takes email address as 100% sure you want to delete check, returns 0 if worked
}

type Query {
  user: User # can only query for current user info
  data(start: Time!, end: Time!): [Day!]!
}

scalar Time

# make generate