package model

import (
	"fmt"
	"io/ioutil"
	"strconv"
	"strings"

	kyberk2so "github.com/symbolicsoft/kyber-k2so"

	"gorm.io/gorm"
)

func check(e error) {
	if e != nil {
		panic(e)
	}
}

/* Encrypt/Decrypt functions */

// GetSK returns secret key from file on server
func GetSK() ([2400]byte, error) {
	// open file
	keys, err := ioutil.ReadFile("server_keys.txt")
	check(err)

	// read in key into byte array
	// trim string to get SK array
	SK := keys[5443 : len(keys)-1]
	//fmt.Print(string(SK))

	str := string(SK)

	// read string into array of bytes (length 2400)
	var secretKey [2400]byte
	s := strings.Split(str, ", ")
	for i := 0; i < 2400; i++ {
		num, _ := strconv.Atoi(s[i])
		secretKey[i] = byte(num)
	}

	// test decrypting ciphertext here

	ciphertext := [...]byte{71, 142, 107, 94, 46, 70, 144, 182, 22, 52, 110, 140, 54, 180, 187, 25, 53, 244, 84, 221, 149, 69, 137, 140, 125, 18, 15, 161, 109, 74, 231, 210, 219, 56, 151, 48, 231, 137, 244, 203, 15, 219, 17, 0, 249, 119, 157, 138, 240, 7, 170, 160, 1, 89, 254, 151, 3, 211, 98, 236, 217, 72, 191, 115, 30, 95, 187, 54, 148, 244, 202, 106, 128, 54, 166, 179, 180, 251, 226, 93, 38, 51, 81, 12, 184, 49, 49, 198, 20, 157, 5, 239, 210, 129, 76, 114, 74, 29, 88, 180, 74, 195, 117, 188, 11, 243, 74, 227, 101, 28, 41, 62, 172, 103, 72, 197, 14, 164, 242, 98, 7, 196, 48, 70, 34, 239, 162, 131, 217, 209, 151, 115, 24, 164, 140, 176, 17, 33, 62, 104, 197, 145, 40, 97, 209, 93, 101, 56, 191, 139, 196, 239, 233, 81, 107, 76, 233, 8, 99, 135, 181, 201, 145, 244, 252, 209, 184, 149, 10, 148, 134, 29, 129, 213, 126, 241, 161, 187, 31, 211, 184, 42, 33, 83, 73, 34, 64, 41, 26, 28, 167, 163, 111, 112, 64, 78, 238, 61, 136, 9, 35, 90, 224, 18, 175, 172, 74, 202, 36, 111, 217, 153, 31, 64, 200, 239, 80, 72, 189, 85, 198, 209, 136, 165, 16, 83, 226, 113, 173, 0, 183, 221, 232, 132, 255, 27, 96, 123, 35, 114, 96, 97, 178, 95, 9, 129, 59, 111, 194, 107, 30, 199, 176, 141, 173, 119, 200, 243, 26, 239, 7, 109, 244, 203, 208, 80, 9, 213, 205, 208, 100, 183, 61, 75, 44, 254, 92, 192, 142, 123, 212, 68, 56, 246, 37, 13, 135, 168, 16, 5, 18, 73, 246, 20, 86, 175, 44, 106, 60, 31, 149, 148, 179, 165, 124, 194, 182, 2, 42, 132, 50, 179, 57, 24, 134, 22, 163, 167, 93, 186, 68, 103, 75, 102, 57, 47, 243, 10, 112, 75, 188, 152, 99, 227, 52, 181, 25, 177, 254, 210, 55, 227, 167, 1, 144, 16, 123, 248, 181, 214, 191, 8, 214, 99, 161, 11, 57, 221, 175, 255, 108, 9, 226, 145, 64, 109, 118, 89, 223, 52, 103, 245, 73, 98, 170, 168, 220, 204, 24, 105, 125, 118, 171, 120, 240, 196, 167, 244, 236, 237, 35, 212, 204, 70, 81, 117, 9, 46, 190, 33, 163, 115, 87, 252, 95, 125, 196, 202, 17, 72, 111, 192, 84, 187, 118, 177, 145, 203, 237, 95, 23, 253, 173, 61, 127, 111, 146, 63, 178, 153, 16, 86, 73, 157, 92, 117, 210, 41, 232, 186, 188, 15, 70, 9, 52, 162, 201, 182, 2, 198, 33, 41, 38, 178, 234, 147, 197, 191, 37, 49, 217, 124, 225, 57, 34, 109, 215, 49, 107, 227, 254, 137, 92, 213, 203, 125, 181, 4, 181, 219, 95, 252, 9, 74, 85, 145, 138, 3, 102, 176, 127, 161, 95, 106, 114, 164, 17, 214, 27, 57, 230, 250, 53, 231, 117, 85, 59, 118, 66, 221, 141, 241, 114, 169, 204, 83, 241, 175, 173, 36, 85, 20, 193, 177, 112, 187, 75, 142, 89, 241, 241, 244, 99, 188, 192, 66, 171, 82, 142, 154, 199, 222, 165, 211, 106, 85, 135, 208, 215, 215, 158, 123, 113, 118, 122, 219, 22, 217, 172, 58, 241, 14, 3, 175, 212, 158, 71, 196, 235, 94, 182, 202, 27, 86, 148, 22, 189, 25, 60, 63, 50, 31, 105, 102, 123, 189, 102, 164, 71, 95, 224, 28, 53, 166, 5, 133, 246, 100, 127, 33, 44, 32, 3, 99, 196, 45, 169, 40, 87, 46, 129, 25, 174, 250, 29, 104, 95, 208, 218, 212, 231, 91, 111, 191, 50, 158, 47, 103, 130, 83, 32, 112, 168, 69, 70, 253, 127, 211, 47, 16, 171, 51, 71, 27, 61, 218, 212, 179, 166, 95, 7, 84, 155, 14, 40, 230, 148, 10, 60, 198, 159, 18, 29, 143, 231, 135, 78, 45, 104, 181, 199, 188, 9, 232, 183, 70, 138, 201, 166, 241, 149, 120, 46, 235, 162, 237, 17, 63, 52, 131, 75, 90, 46, 114, 93, 247, 254, 178, 170, 235, 124, 191, 30, 196, 104, 127, 215, 238, 168, 237, 57, 113, 54, 60, 133, 4, 26, 115, 120, 219, 212, 80, 121, 236, 163, 192, 75, 244, 95, 151, 186, 107, 52, 137, 189, 186, 215, 17, 27, 238, 221, 64, 176, 9, 207, 216, 1, 201, 31, 123, 48, 217, 16, 161, 11, 245, 151, 83, 169, 148, 136, 41, 209, 181, 176, 2, 40, 93, 215, 92, 34, 132, 133, 97, 11, 250, 243, 51, 202, 111, 163, 96, 107, 93, 71, 188, 20, 56, 35, 14, 143, 95, 143, 98, 140, 205, 47, 237, 117, 57, 196, 11, 72, 135, 30, 176, 33, 182, 119, 166, 231, 232, 15, 215, 208, 83, 252, 212, 78, 253, 147, 27, 237, 235, 125, 58, 127, 91, 227, 138, 137, 203, 141, 226, 228, 98, 50, 72, 5, 158, 125, 82, 241, 24, 173, 46, 240, 216, 20, 83, 239, 64, 106, 207, 126, 254, 217, 121, 38, 94, 209, 30, 31, 37, 92, 148, 36, 252, 114, 69, 211, 0, 158, 68, 140, 157, 214, 161, 136, 55, 191, 212, 110, 212, 1, 32, 112, 141, 18, 212, 19, 46, 159, 245, 22, 81, 156, 195, 97, 171, 237, 229, 235, 82, 72, 137, 249, 26, 212, 167, 111, 71, 208, 77, 92, 101, 253, 76, 142, 178, 228, 55, 170, 122, 210, 17, 230, 141, 168, 30, 34, 11, 68, 145, 228, 133, 194, 44, 83, 68, 24, 105, 6, 204, 53, 116, 124, 170, 246, 234, 85, 90, 93, 4, 206, 113, 174, 5, 182, 25, 189, 52, 151, 229, 28, 117, 180, 217, 146, 244, 84, 120, 132, 36, 191, 49, 133, 152, 119, 28, 102, 25, 114, 237, 173, 253, 94, 31, 203, 97, 85, 228, 211, 139, 124, 197, 61, 163, 154, 163, 234, 252, 236, 157, 251, 225, 143, 146, 11, 7, 166, 33, 191, 44, 18, 191, 221, 213, 116, 147, 242, 195, 57, 122, 213, 19, 109, 189, 137, 159, 13, 179, 164, 70, 124, 105, 24, 14, 104, 151, 152, 166, 99, 218, 197, 109, 122, 188, 203, 25, 159, 141, 111, 96, 173, 24, 30, 138, 132, 234, 241, 151, 77, 27, 187, 118, 182, 12, 47, 5, 29, 94, 102, 143, 69, 189, 118, 197, 46, 141, 46, 251, 152, 228, 8, 209, 31, 188}
	ss, _ := kyberk2so.KemDecrypt768(ciphertext, secretKey)

	fmt.Println("ss: ")
	fmt.Println(ss)

	// return byte array of secret key
	return secretKey, nil
}

// DecryptSymmetricKey decrypts c using SK to get ss
func DecryptSymmetricKey(c [1088]byte) ([32]byte, error) {

	secretKey, _ := GetSK()

	ss, _ := kyberk2so.KemDecrypt768(c, secretKey)

	return ss, nil
}

func encrypt(decrypted string) (encrypted string) {
	// do fancy stuff
	encrypted = decrypted
	return encrypted
}

func decrypt(encrypted string) (decrypted string) {
	// undo fancy stuff
	decrypted = encrypted
	return decrypted
}

/* Encrypt/Decrypt functions */

/* Token hooks */

//BeforeCreate method for model.Token
func (token *Token) BeforeCreate(tx *gorm.DB) (err error) {
	token.AccessToken = encrypt(token.AccessToken)
	return nil
}

//AfterFind method for model.Token
func (token *Token) AfterFind(tx *gorm.DB) (err error) {
	token.AccessToken = decrypt(token.AccessToken)
	return nil
}

/* Token hooks */
